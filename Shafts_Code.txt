#importing the libraries
import bpy
import random  
import mathutils
import os
import time
import math
from math import *
import bpy_extras
import numpy as np
from collections import Counter
from mathutils import Vector
from bpy_extras.object_utils import world_to_camera_view
import numpy as np
import cv2 # pip and with that opencv-python must be installed
import os
import time



# you have to install pip and PIL in blender´ python folder
#   - folder can be found in blender´s python console:
#       type import sys and then sys.exec_prefix, this gives python folder
#   - open a powershell as admin and goto this folder, then to subfolder bin, enclose foldername in quotation marks
#   - copy get-pip.py to this bin folder, get-pip.py can be downloaded from https://github.com/pypa/get-pip
#   - go to parent folder python and type .\bin\python.exe .\bin\get-pip.py
#       then a new folder scripts has been created in python subfolder, 
#   - go to this new scripts folder and type pip install opencv-python
#       then you can use cv2 with import cv2 in blender script
#3
#   this script requires the exact settings in blender objects and scene parameters
#   it is helpful to show the blender output console window while running
#   make 3d viewport as large as possible on your monitor
#   select the box with left mouse button
#   restart script if an error occurs
#
# select GPU in Edit->Preferences->System and save preferences
# select GPU Rendering in Modeling->Properties->Render Properties tab

#global constant parameters
num_min_shafts = 35  #minimum number of random created shafts
num_max_shafts = 35 #maximum number of random created shafts
num_repetitions = 1 # how many training images are to be created
start_number = 8645  # first number of saved image and annotation file
num_frames = 300 # how many frames are created in rigid body simulation until stability
image_width = 256 #width of output training image
image_height = 256 #height of output training image
train_path = "C:\\Users\\abhir\\Dropbox\\My PC (LAPTOP-HNUHSA8N)\\Desktop\\Blender professor\\temp\\"
temp_path = "C:\\Users\\abhir\\Dropbox\\My PC (LAPTOP-HNUHSA8N)\\Desktop\\Blender professor\\temp\\new_img\\"
obj_base_location = [0, 0, 30]
obj_stride_z = 3
obj_var_xy = 10
min_overall_power = 50000
max_overall_power = 80000
num_min_suns = 1
num_max_suns = 1
num_min_areas = 2
num_max_areas = 3
sun_energy_factor = 0.000000001

render_ready = True

#######################################################
# functions
####################################################### 
# make all objects in blender selected or unselected
def select_all_objects( select=True ):
    mem_mode = bpy.context.object.mode
    
    if not select:
        if bpy.context.object.mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT')
            
        # deselect all nodes here, to do this, all polygons and vertices must be deselected. 
        # This works in OBJECT edit mode only
        for obj in  bpy.data.collections['Collection_Cylinders'].objects:
            for polygon in obj.data.polygons:
                polygon.select = False
            for edge in obj.data.edges:
                edge.select = False
            for vertex in obj.data.vertices:
                vertex.select = False
                        
        bpy.ops.object.mode_set(mode=mem_mode)    

    for obj in bpy.context.selected_objects:
        obj.select_set(select)
        

    #if select:
    #    bpy.context.view_layer.objects.active = bpy.data.objects['Cylinder']
        
def switch_visibility_all_shafts( visible=True ):
    for obj in  bpy.data.collections['Collection_Cylinders'].objects:
        obj.hide_viewport = not visible
    
    
# create and place illuminations in random positions and orientations     
def create_illuminations( num_min_suns, num_max_suns, num_min_areas, num_max_areas, min_overall_power, max_overall_power ):
    # location restrictions
    sun_max_gamma = 30/180*math.pi
    area_max_gamma = 10/180*math.pi
    sun_min_radius = 20
    sun_max_radius = 50
    area_max_radius = 20
    
    #delete all lights
    select_all_objects( select=False )
    for obj in bpy.data.collections['Collection'].objects:
        if obj.type == 'LIGHT':
            obj.select_set( True )
    bpy.ops.object.delete()
    print("lights deleted")
    
    #set numbers of suns and areas
    num_suns = random.randint( num_min_suns, num_max_suns )
    num_areas = random.randint( num_min_areas, num_max_areas )
    
    #overall power rates
    sun_power_all_rate = 0.0 #random.uniform( 0.0, 0.3)
    area_power_all_rate = 1.0 - sun_power_all_rate
    area_power_all = random.uniform( min_overall_power, max_overall_power ) 
    
    #single illumination power rates
    sun_power_rates = np.random.rand( num_suns )
    area_power_rates = np.random.rand( num_areas )

    #normalize to sum==1.0
    sum = np.sum( sun_power_rates ) + 1.0e-7
    sun_power_rates = sun_power_rates/sum
    sum = np.sum( area_power_rates ) + 1.0e-7
    area_power_rates = area_power_rates/sum

    #create suns
    for i_obj in range( 0, num_suns ):
        obj_name = "sun_" + str( i_obj )
    
        light_data = bpy.data.lights.new(name=obj_name, type='SUN')
        light_object = bpy.data.objects.new(name=obj_name, object_data=light_data)
        bpy.data.collections['Collection'].objects.link( light_object )
        light_object.location = [sun_min_radius + random.random()*(sun_max_radius - sun_min_radius),
                                 sun_min_radius + random.random()*(sun_max_radius - sun_min_radius), 80.0]
        light_object.rotation_euler = [sun_max_gamma*(random.random()-0.5)*2, sun_max_gamma*(random.random()-0.5)*2, 0.0]
        light_object.data.energy = sun_power_rates[i_obj]*sun_power_all_rate*random.uniform( min_overall_power, max_overall_power)*sun_energy_factor
        print( obj_name, " created")

    #create areas
    
    #global area
    obj_name = "area_base" + str( i_obj )

    light_data = bpy.data.lights.new(name=obj_name, type='AREA')
    light_object = bpy.data.objects.new(name=obj_name, object_data=light_data)
    bpy.data.collections['Collection'].objects.link( light_object )
    light_object.location = [0, 0, 70]
    light_object.data.size = 500;
    light_object.rotation_euler = [0.0, 0.0, 0.0]
    light_object.data.energy = 0.0*area_power_all

    print( obj_name, " Energy=",  light_object.data.energy, "  size=",  light_object.data.size )

    for i_obj in range( 0, num_areas ):
        obj_name = "area_" + str( i_obj )
    
        light_data = bpy.data.lights.new(name=obj_name, type='AREA')
        light_object = bpy.data.objects.new(name=obj_name, object_data=light_data)
        bpy.data.collections['Collection'].objects.link( light_object )
        light_object.location = [(random.random()*2.0-1.0)*area_max_radius,
                                 (random.random()*2.0-1.0)*area_max_radius, 60.0]
        light_object.rotation_euler = [area_max_gamma*(random.random()-0.5)*2, area_max_gamma*(random.random()-0.5)*2, 0.0]
        light_object.data.size = random.randint( 50, 100)
        light_object.data.energy = area_power_rates[i_obj]*area_power_all

        print( obj_name, " Energy=",  light_object.data.energy, "  size=",  light_object.data.size )

# create and place shafts in random positions and orientations
def clone_objects( num_objects ):
    bpy.ops.object.mode_set(mode='OBJECT')
    obj_z = obj_base_location[2] + random.random()*obj_stride_z 
        
    # delete all cloned cylinders with exception of first cylinder which is the template cylinder
    select_all_objects( False )
    objs =  bpy.data.collections['Collection_Cylinders'].objects
    for i in range (1,len( objs )):
        objs[i].select_set( True )
    bpy.ops.object.delete()
    
    ctx = bpy.context
    
    #source object, vary z and rotation angle gamma
    src_obj =  bpy.data.collections['Collection_Cylinders'].objects[0]
    src_obj.location = [obj_base_location[0]+obj_var_xy*(2*(random.random()-0.5)),obj_base_location[1]+obj_var_xy*(2*(random.random()-0.5)),obj_z]
    src_obj.rotation_euler = [0,0, random.random()*math.pi]
    
    #clone all new shafts from first one and reposition them
    for i in range(1,num_objects):
        obj_z += obj_stride_z + random.random()*obj_stride_z
        new_obj = src_obj.copy()
        new_obj.animation_data_clear()
        new_obj.data = src_obj.data.copy()
        bpy.data.collections['Collection_Cylinders'].objects.link( new_obj )
        new_obj.location = [obj_base_location[0]+obj_var_xy*(2*(random.random()-0.5)),
                            obj_base_location[1]+obj_var_xy*(2*(random.random()-0.5)),obj_z]
        new_obj.rotation_euler = [0,0, random.random()*math.pi]

    
# get blender 3dview window area and region
def getView3dAreaAndRegion(context):
    for area in bpy.context.screen.areas: 
        if area.type == "VIEW_3D":    
            for region in area.regions:
                if region.type == "WINDOW":
                    print("Found WINDOW") 
                    return area, region
        
# set 3dview window to camera view
def set_camera_view():
    select_all_objects( select=False )
    bpy.data.objects['Box'].select_set( True )
    bpy.ops.object.mode_set(mode='OBJECT')  #needs any object beeing selected


    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            view3dAreaAndRegion = getView3dAreaAndRegion(bpy.context)
            view3dArea, view3dRegion = view3dAreaAndRegion

            area.spaces[0].region_3d.view_perspective = 'CAMERA'
            bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)

            ctx = bpy.context.copy()
            #ctx['area'] = area
            #ctx['region'] = area.regions[-1]
            ctx['area'] = view3dArea 
            ctx['region'] = view3dRegion

            bpy.ops.view3d.view_selected( ctx)  # zoom window to display all objects
            bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)


# set all not hided shafts to visible
def select_all_shafts():
    bpy.ops.object.mode_set(mode='OBJECT')
    select_all_objects( select=False )
    print( "all objects deselected" )
    for obj in bpy.data.collections['Collection_Cylinders'].objects:
        obj.select_set( True )
    print( "all shafts selected" )
    bpy.data.objects['Box'].select_set( False )

    
def select_object( obj ):
    obj.select_set(True)
    
# set all visible vertices in all visible shafts to selected
def select_visible_vertices():
    bpy.ops.object.mode_set(mode='EDIT')
    
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            view3dAreaAndRegion = getView3dAreaAndRegion(bpy.context)
            view3dArea, view3dRegion = view3dAreaAndRegion

            area.spaces[0].region_3d.view_perspective = 'CAMERA'
            bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)

            ctx = bpy.context.copy()
            #ctx['area'] = area
            #ctx['region'] = area.regions[-1]
            ctx['area'] = view3dArea 
            ctx['region'] = view3dRegion

            view3dArea = ctx['area']
    
            bpy.ops.view3d.select_box(ctx,xmin=0,xmax=view3dArea.width,ymin=0,ymax=view3dArea.height,mode='ADD')
            
    bpy.ops.object.mode_set(mode='OBJECT') #evaluate temporal selectiosn made in edit mode

    
# get confidence array for all visible shafts and all vertex groups within shafts all_confidences[i_shaft][i_vertex_group]
# referred to unhidden individual shaft´s visible vertex number
def get_shaft_confidences_individualbase():
    all_confidences = []
    all_bases = []
    confidence = [0,0]
    base = [0,0]

    # two steps
    # first select all objects and all vertices and count all visible vertices for each shaft in step 1
    select_all_objects( False )
    select_all_shafts()
    select_visible_vertices()
    for iStep in range( 0,2 ):  #step1: count vertices in covered shafts; step 2: count vertices in uncoovered shafts
        for obj in bpy.data.collections['Collection_Cylinders'].objects:
            
            if iStep == 1: # only in step 1: select single shaft visible and count its visible vertices
                bpy.ops.object.mode_set(mode='OBJECT') #evaluate temporal selection made in edit mode
                select_all_objects( select=False )
                select_object( obj )
                select_visible_vertices()

            for i_group in range( 0,2 ):
                vertices = [ v for v in obj.data.vertices if i_group in [ vg.group for vg in v.groups ] ]

                count_vert = 0
                for vert in vertices:
                    if vert.select:
                        count_vert += 1  
                if iStep == 0:      
                    confidence[i_group] = count_vert
                elif iStep == 1:
                    if count_vert < 1:  # avoid division by zero error
                        count_vert = 1
                    base[i_group] = count_vert

            if iStep == 0:                        
                all_confidences.append( confidence[:] )
            elif iStep == 1:
                all_bases.append( base[:] )


    # normalize all confidences
    i_obj = 0
    for obj in bpy.data.collections['Collection_Cylinders'].objects:
        all_confidences[i_obj][0] = all_confidences[i_obj][0] / all_bases[i_obj][0]
        all_confidences[i_obj][1] = all_confidences[i_obj][1] / all_bases[i_obj][1]

        i_obj += 1

    print( "confidences" )
    return all_confidences


# get confidence array for all visible shafts and all vertex groups within shafts all_confidences[i_shaft][i_vertex_group]
# referred to maximum number of visible nodes in a shaft
def get_shaft_confidences_maxbase():
    all_confidences = []
    max_vertices = [1,1]
    confidence = [0,0]

    bpy.ops.object.mode_set(mode='OBJECT')
    bpy.data.objects['Box'].select_set( False )

    # step 0 == count visible vertices of object with this object visible
    # step 1 == count visible vertices of object with all objects visible
    for iStep in range( 0,2 ):
        if iStep == 0:
            select_all_objects( select=True )

            for i_group in range( 0,2 ):
                max_vertices[i_group] = 1
                
        for obj in bpy.data.collections['Collection_Cylinders'].objects:
            if iStep == 0: # select this object only
                bpy.ops.object.mode_set(mode='OBJECT')

                # switch visible only this object
                obj.hide_viewport = False
                obj.select_set( True )
                # bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)
                
            else:
                # switch visible only this object
                switch_visibility_all_shafts( True )
                select_all_shafts()
                
            select_visible_vertices();
            # switch_visibility_all_shafts( False )


            # count vertices
            for i_group in range( 0,2 ):
                vertices = [ v for v in obj.data.vertices if i_group in [ vg.group for vg in v.groups ] ]
                
                count_vert = 0
                for vert in vertices:
                    if vert.select:
                        count_vert += 1  
                        
                if iStep == 0:  # count maximum of visible vertices in this object
                    max_vertices[i_group] = count_vert
                else:
                    confidence[i_group] = count_vert / max_vertices[i_group]
                    
                    print( "i_group=", i_group, " max=", max_vertices[i_group], " visible=", count_vert, "\n" )
                    if confidence[i_group] > 1.0:
                        confidence[i_group] = 1.0

            if iStep == 1:            
                all_confidences.append( confidence[:] )
                       
    return all_confidences
    
# write annotation for this basename to annotation file        
def write_annotations( confidences, repetition, base_filename ):
    text = ""
    print( train_path )
    i_obj = 0
    scene = bpy.context.scene
    #mat_world = obj.matrix_world
    camera = bpy.data.objects['Camera']
    for obj in bpy.data.collections['Collection_Cylinders'].objects:
        ol = obj.matrix_world.translation
        coordinates_2d = bpy_extras.object_utils.world_to_camera_view(scene, camera, ol)
        renderscale = scene.render.resolution_percentage / 100
        rendersize = (
        int(scene.render.resolution_x * renderscale),
        int(scene.render.resolution_y * renderscale),
        )
        xx = float(coordinates_2d.x * rendersize[0])
        yy = float(coordinates_2d.y * rendersize[1])
        #yy = image_height-yy

        a = obj.matrix_world.to_euler('XYZ')
        phi = a[1]  #shaft axis against x-y-plane
        
        #projected shaft axis in x-y-plane against x-axis but inverted because y points down in image coordinate system 
        gamma_degrees = math.degrees( a[2] ) 
        gamma_degrees = math.radians(gamma_degrees % 360) 
        
        text = text + str(0) + " " + str(xx) + " " + str(yy) + " " + str(gamma_degrees) + " " + str(phi) + " "\
                    + str(confidences[i_obj][0]) + " " + str(confidences[i_obj][1]) +  "\n"

        i_obj += 1

    textfile = open(base_filename + str(repetition).zfill(6)+'.txt','w')    
    textfile.write(text)
    textfile.close()

def write_rendered_image( repetition, base_filename ):
    render_ready = False  # global synchronization flag
    while len( bpy.data.images ) > 0:
        bpy.data.images.remove( bpy.data.images[0] )
    
    scene = bpy.context.scene
    scene.render.image_settings.file_format = 'BMP'
    scene.render.image_settings.color_depth = '8'
    scene.render.image_settings.color_mode = 'RGB'
    scene.render.image_settings.compression = 0
    
    scene.render.filepath = temp_path +"temp_color.bmp" 

    # workaround: save and load image, convert loaded image to greyscale and save it again
    # hoping that someone finds a better solution, maybe with render output image
    print( "rendering and saving temporary color image" )
    bpy.ops.render.render(animation=False, write_still=True, use_viewport=False, scene="Scene")
    print( "rendered temporary image saved" )

    
# bake the animation
def simulate():
    print( "baking" )
    bpy.ops.ptcache.free_bake_all()
    bpy.ops.ptcache.bake_all(bake=True)
    bpy.context.scene.frame_set(num_frames-1)  

# render complete event handler in which rendered image is loaded, 
# converted to grey scale and saved as training image
def render_complete( dummy ):
    # load rendered image and convert it to greyscale
    base_filename = train_path + "img_"
    img = bpy.data.images.load( temp_path +"temp_color.bmp" )

    arr_img = np.array(img.pixels)
    sqrt_3 = math.sqrt( 3 )
    
    index = 0
    while index < len(img.pixels):
        grey_val = arr_img[index]*arr_img[index] + arr_img[index+1]*arr_img[index+1] + arr_img[index+2]*arr_img[index+2]
        grey_val = grey_val / sqrt_3
        arr_img[index] = grey_val
        arr_img[index+1] = grey_val
        arr_img[index+2] = grey_val
        index += 4
        
    arr_img = np.reshape( arr_img, (img.size[1], img.size[0], 4) )*255
    cv2.imwrite( base_filename + str(repetition + start_number).zfill(6) +".bmp", arr_img )
    print( "training image saved" )
    
    render_ready = True


#######################################################
# main program
#######################################################   

try:
    #deleting and creating new dynamics
    print( "\n\n" )
    print( "----------------------------------------" )
    print( "images and annotations generator started" )
    
    for h in bpy.app.handlers.render_complete:
        print( "removing render_complete handler" )
        bpy.app.handlers.render_complete.remove( h )
    bpy.app.handlers.render_complete.append( render_complete )  #register render_complete event handler
    set_camera_view()

    repetition = 0
    while repetition < num_repetitions:
        clone_objects( random.randint( num_min_shafts, num_max_shafts ))
        create_illuminations( num_min_suns, num_max_suns, num_min_areas, num_max_areas, min_overall_power, max_overall_power )
        simulate()
        
            
        #select_all_shafts()
        
        #select_visible_vertices()
        
        confidences = get_shaft_confidences_individualbase()
        print( "confidences computed" )

        #testein
        # ans = input().split(' ')[0] #getchar
        bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)


        write_annotations( confidences, repetition + start_number, train_path + "img_" )
        write_rendered_image( repetition + start_number, train_path + "img_" )
        
        
        # make shure that render thread is finished before continuing with next bake
        print( "waiting for render ready" )
        while not render_ready:
            print( "." )
            sleep(0.5)
    

        # Set up paths for saving images
        synthetic_base_path = "C:\\Users\\abhir\\Dropbox\\My PC (LAPTOP-HNUHSA8N)\\Desktop\\Blender professor\\synthetic\\img_"
        masked_base_path = "C:\\Users\\abhir\\Dropbox\\My PC (LAPTOP-HNUHSA8N)\\Desktop\\Blender professor\\masked\\img_"

        # Set up rendering settings
        bpy.context.scene.render.image_settings.file_format = 'BMP'
        #bpy.context.scene.render.image_settings.color_mode = 'BW'
        bpy.context.scene.render.resolution_x = 256
        bpy.context.scene.render.resolution_y = 256

        # Set up nodes for compositing
        tree = bpy.context.scene.node_tree
        links = tree.links

        # Remove existing nodes
        for node in tree.nodes:
            tree.nodes.remove(node)

        # Add new nodes for compositing
        rl = tree.nodes.new(type="CompositorNodeRLayers")
        viewer_synthetic = tree.nodes.new(type="CompositorNodeViewer")
        viewer_masked = tree.nodes.new(type="CompositorNodeViewer")
        id_mask = tree.nodes.new(type="CompositorNodeIDMask")
        invert = tree.nodes.new(type="CompositorNodeInvert")

        # Set node parameters
        id_mask.index = 3  # Index value for ID Mask
        viewer_synthetic.use_alpha = False
        viewer_masked.use_alpha = False

        # Connect nodes
        links.new(rl.outputs[0], id_mask.inputs[0])
        links.new(id_mask.outputs[0], invert.inputs[1])
        links.new(invert.outputs[0], viewer_masked.inputs[0])
        links.new(rl.outputs[0], viewer_synthetic.inputs[0])

        # Set up object settings for masking
        confidence_threshold = 0.97
        pass_index_value = 3
        i = 0

        # Loop through all objects in the scene
        for obj in bpy.data.collections['Collection_Cylinders'].objects:
            obj.pass_index = 2
            i += 1

            if confidences[i-1][0] > confidence_threshold or confidences[i-1][1] > confidence_threshold:
                if obj.name.startswith("Cylinder"):
                    obj.pass_index = pass_index_value

            if i == len(confidences):
                break

        # Render and save synthetic image
        repetition = 0
        while repetition < num_repetitions:
            bpy.context.scene.render.filepath = synthetic_base_path + str(repetition) + ".bmp"
            bpy.ops.render.render(write_still=True)
            repetition += 1

        # Render and save masked image
        repetition = 0
        while repetition < num_repetitions:
            viewer_masked.update()
            image = bpy.data.images.get("Viewer Node")
            if image is not None:
                image.save_render(masked_base_path + str(repetition) + ".bmp")
            repetition += 1

    
    
    
    print( "exit normal" )
except:
    print( "exit with error" )        
             